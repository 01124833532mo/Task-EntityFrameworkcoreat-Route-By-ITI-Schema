// <auto-generated />
using System;
using Assement.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assement.Migrations
{
    [DbContext(typeof(ITIdbContext))]
    partial class ITIdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assement.Entities.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Duration")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("date")
                        .HasComputedColumnSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Top_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Top_ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Assement.Entities.Course_Inst", b =>
                {
                    b.Property<int?>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Inst_ID")
                        .HasColumnType("int");

                    b.Property<string>("evaluate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Course_ID", "Inst_ID");

                    b.HasIndex("Inst_ID");

                    b.ToTable("Course_Insts");
                });

            modelBuilder.Entity("Assement.Entities.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 10L, 10);

                    b.Property<DateOnly>("HiringDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("date")
                        .HasComputedColumnSql("GETDATE()");

                    b.Property<int>("Ins_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("instructorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Ins_ID")
                        .IsUnique();

                    b.HasIndex("instructorID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Assement.Entities.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int?>("Dept_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("HourRateBonous")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("ID");

                    b.HasIndex("Dept_ID");

                    b.ToTable("instructors");
                });

            modelBuilder.Entity("Assement.Entities.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Dept_id")
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("ID");

                    b.HasIndex("Dept_id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Assement.Entities.Student_Cours", b =>
                {
                    b.Property<int>("Stud_ID")
                        .HasColumnType("int");

                    b.Property<int>("Cours_ID")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("Stud_ID", "Cours_ID");

                    b.HasIndex("Cours_ID");

                    b.ToTable("student_Courses");
                });

            modelBuilder.Entity("Assement.Entities.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("ID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Assement.Entities.Course", b =>
                {
                    b.HasOne("Assement.Entities.Topic", "topic")
                        .WithMany("courses")
                        .HasForeignKey("Top_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("topic");
                });

            modelBuilder.Entity("Assement.Entities.Course_Inst", b =>
                {
                    b.HasOne("Assement.Entities.Course", "course")
                        .WithMany("course_Insts")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Assement.Entities.Instructor", "instructor")
                        .WithMany("course_Insts")
                        .HasForeignKey("Inst_ID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("course");

                    b.Navigation("instructor");
                });

            modelBuilder.Entity("Assement.Entities.Department", b =>
                {
                    b.HasOne("Assement.Entities.Instructor", "Instructor")
                        .WithOne("DepartmentManager")
                        .HasForeignKey("Assement.Entities.Department", "Ins_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Assement.Entities.Instructor", "instructor")
                        .WithMany()
                        .HasForeignKey("instructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("instructor");
                });

            modelBuilder.Entity("Assement.Entities.Instructor", b =>
                {
                    b.HasOne("Assement.Entities.Department", "department")
                        .WithMany("instructors")
                        .HasForeignKey("Dept_ID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("department");
                });

            modelBuilder.Entity("Assement.Entities.Student", b =>
                {
                    b.HasOne("Assement.Entities.Department", "department")
                        .WithMany("students")
                        .HasForeignKey("Dept_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("Assement.Entities.Student_Cours", b =>
                {
                    b.HasOne("Assement.Entities.Course", "course")
                        .WithMany("student_Cours")
                        .HasForeignKey("Cours_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assement.Entities.Student", "student")
                        .WithMany("student_Cours")
                        .HasForeignKey("Stud_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("student");
                });

            modelBuilder.Entity("Assement.Entities.Course", b =>
                {
                    b.Navigation("course_Insts");

                    b.Navigation("student_Cours");
                });

            modelBuilder.Entity("Assement.Entities.Department", b =>
                {
                    b.Navigation("instructors");

                    b.Navigation("students");
                });

            modelBuilder.Entity("Assement.Entities.Instructor", b =>
                {
                    b.Navigation("DepartmentManager");

                    b.Navigation("course_Insts");
                });

            modelBuilder.Entity("Assement.Entities.Student", b =>
                {
                    b.Navigation("student_Cours");
                });

            modelBuilder.Entity("Assement.Entities.Topic", b =>
                {
                    b.Navigation("courses");
                });
#pragma warning restore 612, 618
        }
    }
}
